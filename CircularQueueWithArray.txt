package com.company;

class CirQueArr{
    static int front=-1;
    static  int rear=-1;
    static int max=10;
    static int[] arr = new int[10];

    static void enque(int num){
        if(front==-1 && rear==-1){
            front+=1;
            rear+=1;
            arr[front]=num;
        }else if((front==0 && rear == (max-1))||(rear==front-1)){
            System.out.println("arr is full , we can not add the element");
        }else  {
            arr[(rear + 1) % (max)] = num;
            rear = (rear + 1) % (max);
        }
    }

    static  void deque(){
        if(front==-1 && rear==-1){
            System.out.println("Given arr is empty , I can not deque the element");
        }else if((front==0 && rear == (max-1))||(rear==front-1)||(front == 0 && rear < max-1)){
            arr[front]=0;
            front+=1;
        }else if (front==rear){
            arr[front]=0;
            front=-1;
            rear=-1;
        }else {
            arr[front]=0;
            front = (front+=1)%(max);
        }
    }

    static void showque(){
        int i = front;
        System.out.println("Our array is this: ");
        if (rear>=front){
            while (i <= rear){
                System.out.println(arr[i]);
                i+=1;
            }
        }else if (rear<front){
            while (i<=max-1) {
                System.out.println(arr[i]);
                i += 1;
            }
            while(i>max-1 && i<= (max+front-1) ){
                System.out.println((arr[i%max]));
                i+=1;
            }
        }
    }

    static void showfr(){
        System.out.println("Our front and rear elem. are following :");
        System.out.println(arr[front]);
        System.out.println(arr[rear]);
    }
}

public class Main{
    public static void main(String[] args){
        CirQueArr crq = new CirQueArr();
        crq.enque(4);
        crq.enque(8);
        crq.enque(12);
        crq.enque(16);
        crq.enque(4);
        crq.enque(8);
        crq.enque(12);
        crq.enque(16);
        crq.enque(4);
        crq.enque(8);
        crq.enque(12);
        crq.enque(16);
        crq.showque();
        crq.deque();
        crq.deque();
        crq.deque();
        crq.deque();
        crq.deque();
        crq.deque();
        crq.enque(1);
        crq.enque(2);
        crq.enque(1);
        crq.enque(2);
        crq.enque(1);
        crq.enque(2);
        crq.showque();
        crq.showfr();

    }
}
