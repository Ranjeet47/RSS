
import java.util.*;

class Node {
    int data;
    int level;
    Node parent ;
    Vector<Node> child = new Vector<>();

    Node left;
    Node right;
    int high;

    Node(int datta ){
        data = datta;
        level = 0;
        parent = null;

        left = null;
        right = null;
        high = 0;
    }
}
public class OrgHierarchy implements OrgHierarchyInterface{
    Node root;
    int countt;
    static Node source ;

    public static int height(Node node){
        if(node == null){
            return -1;
        }else {
            return node.high;
        }
    }

    public static int greater(int x , int y){
        if(x>y){
            return x;
        }
        else {
            return y;
        }
    }

    public static Node rr(Node node){
        Node y = node.left;
        Node t = y.right;
        y.right = node;
        node.left = t;
        node.high = greater( height(node.left) , height(node.right) )+1;
        y.high = greater( height(y.left) , height(y.right ))+1;
        return y;
    }

    public  static Node lr(Node node){
        Node y = node.right;
        Node t = y.left;
        y.left = node;
        node.right = t;
        node.high = greater( height(node.left) , height(node.right) )+1;
        y.high = greater( height(y.left) , height(y.right) ) + 1;
        return y;
    }

    public static int Bfac(Node node){
        if(node == null){
            return 0;
        }
        else {
            return ( height(node.left)-height(node.right) );
        }
    }

    public static Node AVLSearch(Node src ,int id){

        if (src == null){
            return null;
        }
        if(src.data == id){
            return src;
        }else {
            if (src.data > id){
                return AVLSearch(src.left ,id);
            }
            else {
                return AVLSearch(src.right , id);
            }
        }
    }

    public static Node insert(Node src , Node idd){
        if(src == null){
            source = node;
            return node;
        }

        if( src.data > idd.data){
            src.left = insert(src.left , idd);
        }
        else{
            src.right = insert(src.right , idd);
        }

        src.high = greater( height(src.left),height(src.right) ) +1;
        int srcBF = Bfac(src);
        if(srcBF < -1 && idd.data > src.right.data){
            return lr(src);
        }
        if(srcBF < -1 && idd.data < src.right.data){
            src.right = rr(src.right);
            return lr(src);
        }
        if(srcBF > 1 && idd.data > src.left.data ){
            src.left = lr(src.left);
            return rr(src);
        }
        if (srcBF > 1 && idd.data < src.left.data){
            return rr(src);
        }

        return src;
    }

    public  static Node rightmin(Node node){
        Node node1 = node;
        while (node1.left != null){
            node1 = node1.left;
        }
        return node1;
    }
    public static Node delete(Node srs , Node ide ){
        if (srs == null){
            return srs;
        }
        if(srs.data < ide.data ){
            srs.right = delete(srs.right , ide);
        }
        else {
            if(srs.data > ide.data){
                srs.left = delete(srs.left , ide);
            }
            else {
                if(srs.left == null || srs.right == null){
                    if(srs.left == null){
                        if(srs.right == null){
                            srs = null;
                        }else {
                            srs = srs.right;
                        }
                    }
                    else {
                        srs = srs.left;
                    }
                }
                else {
                    Node rTmin = rightmin(srs.right);
                    srs.data = rTmin.data;
                    srs.right = delete(srs.right , rTmin);

                }
            }
        }
        if (srs == null){
            return srs;
        }
        srs.high = greater( height(srs.left) , height(srs.right)) + 1;
        int srsBF = Bfac(srs);

        if( srsBF < -1 && Bfac(srs.right) <= 0){
            return lr(srs);
        }
        if (srsBF < -1 && Bfac(srs.right) < 0){
            srs.right = rr(srs.right);
            return lr(srs);
        }
        if (srsBF > 1 && Bfac(srs.left) >= 0){
            return rr(srs);
        }
        if (srsBF > 1 &&  Bfac(srs.right) < 0){
            srs.left = lr(srs.left);
            return rr(srs);
        }
        return srs;
    }



    public boolean isEmpty(){
        if(root==null){
            return true;
        }
        else {
            return false;
        }
    }

    public int size(){
        return countt;
    }

    public int level(int id) throws IllegalIDException, EmptyTreeException{
        if(isEmpty()){
            throw new EmptyTreeException("there is no member in the company ");
        }
        else {
            Node nod = AVLSearch(source,id);
            if( nod!=null ){
                return nod.level;
            }
            else {
                throw new IllegalIDException("there is no member of the company with given id ");
            }
        }
    }

    public void hireOwner(int id) throws NotEmptyException{
        if(root != null){
            throw  new NotEmptyException("there ia already a owner in the given company");
        }
        else {
            Node nod = new Node(id);
            nod.level = 1;
            countt += 1;
            root = nod;
            source = insert(source,nod);
        }
    }


    public void hireEmployee(int id, int bossid) throws IllegalIDException, EmptyTreeException{
        if(root==null){
            throw new EmptyTreeException("there is no element in the tree ");
        }
        if(root.data==bossid){
            Node nod = new Node(id);
            root.child.add(nod);
            nod.parent = root;
            countt += 1;
            nod.level = root.level + 1;
            source = insert(source,nod);
        }
        else {
            Node nodd = AVLSearch(source,bossid);
            if (nodd!= null){
                Node nod = new Node(id);
                nodd.child.add(nod);
                nod.parent = nodd;
                countt +=1;
                nod.level = nodd.level + 1;
                source = insert(source,nod);
            }
            else {
                throw new IllegalIDException("there is no such boss present in the company");
            }
        }
    }


    public void fireEmployee(int id) throws IllegalIDException,EmptyTreeException{
        if(root == null){
            throw new EmptyTreeException("there is no element in the tree");
        }

        if(root.data == id){
            throw new IllegalIDException("owner can not be deleted ");
        }
        else {
            Node nodee = AVLSearch(source,id);
            if(nodee==null){
                throw new IllegalIDException("there is no such member to be deleted ");
            }
            if(nodee.child.size() == 0){
                countt-=1;
                nodee.parent.child.remove(nodee);
                source = delete(source,nodee);
            }
            else {
                throw new IllegalIDException("internal member can not be deleted ");
            }
        }
    }

    public void fireEmployee(int id, int manageid) throws IllegalIDException,EmptyTreeException{
        if(root==null){
            throw new EmptyTreeException("there is no member present in the company");
        }

        if (root.data == id){
            throw new IllegalIDException("owner can not exchange juniors with anyone");
        }
        Node nodee = AVLSearch(source,id);
        if(nodee==null){
            throw new IllegalIDException("given id does exist in the company");
        }
        else {
            Vector<Node>  vctr1 = nodee.child;
            Node nodde = AVLSearch(source,manageid);
            if(nodde == null){
                throw new IllegalIDException(("given manageid does exist in the company"));
            }
            else {
                if(nodde.level == nodee.level){
                    for (int i = 0; i < vctr1.toArray().length; i++) {
                        nodde.child.add(vctr1.elementAt(i));
                        vctr1.elementAt(i).parent = nodde;
                    }
                    countt -= 1;
                    nodee.parent.child.remove(nodee);
                    source = delete(source,nodee);
                }
                else {
                    throw new IllegalIDException(("both given id members are not at the same level"));
                }
            }
        }
    }


    public int boss(int id) throws IllegalIDException,EmptyTreeException{
        if(root==null){
            throw new EmptyTreeException("there is no member in the company");
        }
        if(root.data == id){
            throw new IllegalIDException("ownwer does not have any boss");
        }
        else {
            Node noddd = AVLSearch(source,id);
            if(noddd != null){
                return noddd.parent.data;
            }
            else {
                throw new IllegalIDException("there is no member with given id");
            }
        }
    }

    public int lowestCommonBoss(int id1, int id2) throws IllegalIDException,EmptyTreeException{
        if(root==null){
            throw new EmptyTreeException("there is no member in the company");
        }

        if(root.data == id1 || root.data == id2){
            return -1;
        }
        Node nod1 = AVLSearch(source,id1);
        Node nod2 = AVLSearch(source,id2);
        if(nod1 == null || nod2 == null){
            throw new IllegalIDException("there one of id or both is not present in the company");
        }

        if(nod1.data == nod2.data){
            return nod1.parent.data;
        }
        while(nod1.parent != null ){
            Node nodd = nod2;
            while(nod2.parent != null){
                if(nod1.parent == nod2.parent){
                    return nod1.parent.data;
                }else {
                    if(nod2.parent.parent != null){
                        nod2 = nod2.parent;
                    }else {
                        nod2 = nodd;
                        nod1 = nod1.parent;
                    }
                }
            }
            if(nod1.parent.parent != null){
                nod1 = nod1.parent;
            }
        }
        throw new IllegalIDException("there is no common boss");
    }

    Vector<Node> vctr2 = new Vector<>();
    String str = " ";
    int i=1;
    public String toString(int id) throws IllegalIDException, EmptyTreeException{
        Vector<Node> vctrr = new Vector<>();
        if(root==null){
            throw new EmptyTreeException("there is no member in the company ");
        }
        Node nod = AVLSearch(source,id);
        if(nod==null){
            throw new IllegalIDException("the given id member is not present ");
        }
        else {
            if(i==1){
                i+=1;
                vctr2.add(nod);
                vctrr.add(nod);
            }
            Node nodd = vctr2.firstElement();

            while(nodd!=null ){
                for (int j = 0; j < nodd.child.toArray().length; j++) {
                    vctr2.add(nodd.child.elementAt(j));
                    vctrr.add(nodd.child.elementAt(j));
                }

                vctr2.remove(0);
                if(!vctr2.isEmpty()){
                    nodd = vctr2.firstElement();
                }
                if(vctr2.isEmpty()){
                    nodd = null;
                }
            }
        }

        Vector<Node> vct = new Vector<>();
        Vector<Node> vctot = new Vector<>();
        for (int j = 0; j < vctrr.toArray().length; j++) {
            if(vctot.toArray().length ==0){
                vctot.add(vctrr.elementAt(j));
                if(j==vctrr.toArray().length-1){
                    for (int l = 0; l < vctot.toArray().length; l++) {
                        vct.add(vctot.elementAt(l));
                    }
                }
            }
            else {
                if ( vctrr.elementAt(j).level != vctot.lastElement().level) {
                    Collections.sort(vctot, new Comparator<Node>() {
                        @Override
                        public int compare(Node o1, Node o2) {
                            return o1.data-o2.data;
                        }
                    });
                    for (int l = 0; l < vctot.toArray().length; l++) {
                        vct.add(vctot.elementAt(l));
                    }
                    vctot.clear();
                    vctot.add(vctrr.elementAt(j));
                    if(j==vctrr.toArray().length-1){
                        vct.add(vctot.elementAt(0));
                    }
                }
                else {
                    vctot.add(vctrr.elementAt(j));
                    if(j==vctrr.toArray().length-1){
                        Collections.sort(vctot, new Comparator<Node>() {
                            @Override
                            public int compare(Node o1, Node o2) {
                                return o1.data-o2.data;
                            }
                        });
                        for (int l = 0; l < vctot.toArray().length; l++) {
                            vct.add(vctot.elementAt(l));
                        }
                    }

                }
            }
        }

        for (int j = 0; j < vct.toArray().length; j++) {
            if(j==0){
                str += vct.elementAt(j).data;
            }
            if(j>0 && vct.elementAt(j).level == vct.elementAt(j-1).level){
                str += " "+vct.elementAt(j).data;
            }
            if(j>0 && vct.elementAt(j).level != vct.elementAt(j-1).level){
                str += ","+vct.elementAt(j).data;
            }
        }
        String strg = "";
        if(str.length() > 0){
            strg = str;
            i = 1;
            str = "";
        }
        return strg;
    }

}
